{"version":3,"sources":["services/firebase.js","Login.js","ChartViewer.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Login","props","login","bind","handleChange","signup","state","email","password","e","this","setState","target","name","value","preventDefault","auth","signInWithEmailAndPassword","then","u","catch","error","console","log","createUserWithEmailAndPassword","className","class","for","onChange","type","id","aria-describedby","placeholder","onClick","style","marginLeft","Component","ReactFC","fcRoot","FusionCharts","TimeSeries","schemaFetch","dataSource","chart","caption","text","yaxis","plot","title","ChartViewer","onFetchData","timeseriesDs","renderAt","width","height","prevProps","values","length","KDRatio","graphValues","graphValuesByDay","JSON","stringify","Object","forEach","item","date","kills","deaths","practice","keys","push","Promise","all","res","data","schema","fusionTable","DataStore","createDataTable","assign","React","Home","handleChangePractice","practiceTime","validity","valid","handleChangeKills","matchKills","handleChangeDeaths","matchDeaths","submitPracticeStats","Date","upload","getMonth","getDate","getFullYear","Number","newPostKey","database","ref","child","currentUser","uid","key","updates","update","submitGameStats","logout","graphArray","on","snap","careerStats","val","signOut","totalKills","totalDeaths","totalPractice","pattern","disabled","App","updateK","k","updateD","d","updateFirebase","set","user","authListener","onAuthStateChanged","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a9d0c343.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBw7SptYT2jKo6IblD6zCnjOX1qQPzpf78\",\r\n    authDomain: \"tracker-strike.firebaseapp.com\",\r\n    databaseURL: \"https://tracker-strike.firebaseio.com\",\r\n    projectId: \"tracker-strike\",\r\n    storageBucket: \"tracker-strike.appspot.com\",\r\n    messagingSenderId: \"167547322406\",\r\n    appId: \"1:167547322406:web:86d62186d991dbb6cde6e7\"\r\n};\r\n// Initialize Firebase\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fire;","import React, { Component } from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport fire from './services/firebase';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.login = this.login.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.signup = this.signup.bind(this);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    login(e) {\r\n        e.preventDefault();\r\n        fire.auth().signInWithEmailAndPassword(this.state.email, this.state.password).then((u) => {\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    signup(e) {\r\n        e.preventDefault();\r\n        fire.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then((u) => {\r\n        }).then((u) => { \r\n            console.log(u);\r\n             \r\n        })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-6\">\r\n                <form>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"exampleInputEmail1\">Email address</label>\r\n                        <input value={this.state.email} onChange={this.handleChange} type=\"email\" name=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" placeholder=\"Enter email\" />\r\n                        <small id=\"emailHelp\" class=\"form-text text-muted\">We'll never share your email with anyone else.</small>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"exampleInputPassword1\">Password</label>\r\n                        <input value={this.state.password} onChange={this.handleChange} type=\"password\" name=\"password\" class=\"form-control\" id=\"exampleInputPassword1\" placeholder=\"Password\" />\r\n                    </div>\r\n                    <button type=\"submit\" onClick={this.login} class=\"btn btn-primary\">Login</button>\r\n                    <button onClick={this.signup} style={{ marginLeft: '25px' }} className=\"btn btn-success\">Signup</button>\r\n                </form>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Login;","import React from \"react\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\r\nimport ReactFC from \"react-fusioncharts\";\r\n\r\nReactFC.fcRoot(FusionCharts, TimeSeries);\r\n\r\nconst schemaFetch = [{\r\n    \"name\": \"Time\",\r\n    \"type\": \"date\",\r\n    \"format\": \"%-m/%-d/%Y\"\r\n}, {\r\n    \"name\": \"KD ratio\",\r\n    \"type\": \"number\"\r\n}, {\r\n    \"name\": \"Practice\",\r\n    \"type\": \"number\"\r\n}];\r\n\r\nconst dataSource = {\r\n    chart: {},\r\n    caption: {\r\n        text: \"Gameplay stats\"\r\n    },\r\n    yaxis: [\r\n        {\r\n            plot: {\r\n                value: \"KD ratio\",\r\n                type: \"area\"\r\n            },\r\n            title: \"KD ratio\"\r\n        },\r\n\r\n        {\r\n            plot: {\r\n                value: \"Practice\",\r\n                type: \"column\"\r\n            },\r\n            title: \"Practice\"\r\n        }\r\n    ]\r\n};\r\n\r\nclass ChartViewer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onFetchData = this.onFetchData.bind(this);\r\n        this.state = {\r\n            timeseriesDs: {\r\n                type: \"timeseries\",\r\n                renderAt: \"container\",\r\n                width: \"600\",\r\n                height: \"400\",\r\n                dataSource\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        console.log('Component updated');\r\n        if (this.props.values && prevProps.values && this.props.values.length !== prevProps.values.length) {\r\n            // console.log('Component updated')\r\n\r\n            let KDRatio = null;\r\n            let graphValues = [];\r\n            let graphValuesByDay = {};\r\n            console.log(JSON.stringify(this.props.values));\r\n            Object.values(this.props.values).forEach(item => {\r\n                if (graphValuesByDay[item.date]) {\r\n                    graphValuesByDay[item.date].kills += item.kills;\r\n                    graphValuesByDay[item.date].deaths += item.deaths;\r\n                    graphValuesByDay[item.date].practice += item.practice;\r\n                }\r\n                else {\r\n                    graphValuesByDay[item.date] = { kills: item.kills, deaths: item.deaths, practice: item.practice };\r\n                }\r\n            });\r\n\r\n            Object.keys(graphValuesByDay).forEach(date => {\r\n                const item = graphValuesByDay[date];\r\n                if (item.deaths === 0) {\r\n                    KDRatio = item.kills;\r\n                }\r\n                else {\r\n                    KDRatio = item.kills / item.deaths;\r\n                }\r\n                graphValues.push([date, KDRatio, item.practice]);\r\n            })\r\n\r\n\r\n\r\n\r\n            this.onFetchData(graphValues);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.onFetchData();\r\n    }\r\n\r\n    onFetchData(values) {\r\n\r\n        Promise.all([values, schemaFetch]).then(res => {\r\n            const data = res[0];\r\n            const schema = res[1];\r\n            const fusionTable = new FusionCharts.DataStore().createDataTable(\r\n                data,\r\n                schema\r\n            );\r\n            const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\r\n            timeseriesDs.dataSource.data = fusionTable;\r\n            this.setState({\r\n                timeseriesDs\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.timeseriesDs.dataSource.data ? (\r\n                    <ReactFC {...this.state.timeseriesDs} />\r\n                ) : (\r\n                        \"loading\"\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartViewer;","import React, { Component } from 'react';\r\nimport firebase from './services/firebase';\r\nimport ChartViewer from './ChartViewer';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.logout = this.logout.bind(this);\r\n        this.state = {\r\n            practiceTime: '',\r\n            matchKills: '',\r\n            matchDeaths: '',\r\n            graphArray: []\r\n        }\r\n    }\r\n\r\n\r\n    handleChangePractice = (e) => {\r\n        const practiceTime = (e.target.validity.valid) ? e.target.value : this.state.practiceTime;\r\n\r\n        this.setState({ practiceTime });\r\n    }\r\n\r\n    handleChangeKills = (e) => {\r\n        const matchKills = (e.target.validity.valid) ? e.target.value : this.state.matchKills;\r\n\r\n        this.setState({ matchKills });\r\n    }\r\n\r\n    handleChangeDeaths = (e) => {\r\n        const matchDeaths = (e.target.validity.valid) ? e.target.value : this.state.matchDeaths;\r\n\r\n        this.setState({ matchDeaths });\r\n    }\r\n\r\n    submitPracticeStats = () => {\r\n        let date = new Date();\r\n        let upload = {\r\n            date: (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear(),\r\n            kills: 0,\r\n            deaths: 0,\r\n            practice: Number(this.state.practiceTime)\r\n        }\r\n        this.setState({ practiceTime: '' });\r\n        console.log(upload);\r\n\r\n\r\n        // Get a key for a new Post.\r\n        var newPostKey = firebase.database().ref().child(firebase.auth().currentUser.uid).push().key;\r\n\r\n        // Write the new post's data simultaneously in the posts list and the user's post list.\r\n        var updates = {};\r\n        updates[firebase.auth().currentUser.uid + '/' + newPostKey] = upload;\r\n\r\n        return firebase.database().ref().update(updates);\r\n    }\r\n\r\n    submitGameStats = () => {\r\n        let date = new Date();\r\n        let upload = {\r\n            date: (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear(),\r\n            kills: Number(this.state.matchKills),\r\n            deaths: Number(this.state.matchDeaths),\r\n            practice: 0\r\n        }\r\n        this.setState({ matchKills: '', matchDeaths: '' });\r\n        console.log(upload);\r\n\r\n\r\n        // Get a key for a new Post.\r\n        var newPostKey = firebase.database().ref().child(firebase.auth().currentUser.uid).push().key;\r\n\r\n        // Write the new post's data simultaneously in the posts list and the user's post list.\r\n        var updates = {};\r\n        updates[firebase.auth().currentUser.uid + '/' + newPostKey] = upload;\r\n\r\n        return firebase.database().ref().update(updates);\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        firebase.database().ref(firebase.auth().currentUser.uid).on('value', (snap) => {\r\n            console.log('theres new values')\r\n            \r\n            this.setState({ careerStats: snap.val() });\r\n        });\r\n        // this.setState({uid: firebase.auth().currentUser.uid});\r\n\r\n        \r\n    }\r\n\r\n    logout() {\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    render() {\r\n        // let date = new Date();\r\n        // let currDate = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\r\n        // let userProfile = firebase.database().ref(firebase.auth().currentUser.uid);\r\n        // userProfile.on('value', (snap) => { console.log(snap.val()) });\r\n\r\n        let totalKills = 0;\r\n        let totalDeaths = 0;\r\n        let totalPractice = 0;\r\n        if (this.state.careerStats) {\r\n            Object.values(this.state.careerStats).forEach(item => { totalKills += item.kills });\r\n            Object.values(this.state.careerStats).forEach(item => { totalDeaths += item.deaths });\r\n            Object.values(this.state.careerStats).forEach(item => { totalPractice += item.practice });\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <div>\r\n                        Total career practice time: {totalPractice} minutes\r\n                    </div>\r\n                    <div>\r\n                        Total career kills: {totalKills}\r\n                    </div>\r\n                    <div>\r\n                        Total career deaths: {totalDeaths}\r\n                    </div>\r\n                </div>\r\n                <ChartViewer values = {this.state.careerStats}/>\r\n                <div>Enter time practiced in minutes:\r\n                <input type=\"text\" pattern=\"[0-9]*\" onChange={this.handleChangePractice} value={this.state.practiceTime} />\r\n                    <button disabled={this.state.practiceTime === ''} onClick={this.submitPracticeStats}>Submit practice time</button>\r\n                </div>\r\n                <div>\r\n                    Match stats\r\n                <div>Enter match kills:\r\n                <input type=\"text\" pattern=\"[0-9]*\" onChange={this.handleChangeKills} value={this.state.matchKills} />\r\n                    </div>\r\n                    <div>Enter match deaths:\r\n                <input type=\"text\" pattern=\"[0-9]*\" onChange={this.handleChangeDeaths} value={this.state.matchDeaths} />\r\n                    </div>\r\n                    <button onClick={this.submitGameStats} disabled={((this.state.matchKills === '') || (this.state.matchDeaths === ''))}>Submit match stats</button>\r\n                </div>\r\n                <button onClick={this.logout}>Logout</button>\r\n            </div>);\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Home;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './services/firebase';\nimport Login from './Login';\nimport Home from './Home'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = ({\n      user: null,\n    });\n    this.authListener = this.authListener.bind(this);\n  }\n  \n\n\n  componentDidMount() {\n    this.authListener();\n    \n  }\n\n  updateK = (e) => {\n    this.setState({ k: e.target.value })\n  }\n\n  updateD = (e) => {\n    this.setState({ d: e.target.value })\n  }\n\n  updateFirebase = () => {\n    firebase.database().ref().set({\n      practice: 30,\n      k: this.state.k,\n      d: this.state.d\n    });\n  }\n\n  authListener() {\n    firebase.auth().onAuthStateChanged((user) => {\n      if (user) {\n        console.log('logged in');\n        this.setState({ user });\n        // console.log(user.uid);\n      }\n      else {\n        console.log('could not log in');\n        this.setState({ user: null })\n      }\n    })\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        {this.state.user ? (<Home />) : (<Login />)}\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}